[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.ability.consumeable.hand_type then'''
position = "after"
payload = '''
    if next(find_joker('Supermeteor')) then
        update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {handname=localize(self.ability.consumeable.hand_type, 'poker_hands'),chips = G.GAME.hands[self.ability.consumeable.hand_type].chips, mult = G.GAME.hands[self.ability.consumeable.hand_type].mult, level=G.GAME.hands[self.ability.consumeable.hand_type].level})
        level_up_hand(used_tarot, self.ability.consumeable.hand_type)
        update_hand_text({sound = 'button', volume = 0.7, pitch = 1.1, delay = 0}, {mult = 0, chips = 0, handname = '', level = ''})
    end
'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 0.9, delay = 0}, {level='+1'})'''
position = "at"
payload = '''
    if next(find_joker('Supermeteor')) then
        update_hand_text({sound = 'button', volume = 0.7, pitch = 0.9, delay = 0}, {level='+2'})
    else
        update_hand_text({sound = 'button', volume = 0.7, pitch = 0.9, delay = 0}, {level='+1'})
    end
'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''level_up_hand(self, k, true)'''
position = "after"
payload = '''
    if next(find_joker('Supermeteor')) then
        level_up_hand(self, k, true)
    end
'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.ability and self.ability.perma_debuff then self.debuff = true end'''
position = "after"
payload = '''
    if self.ability.name == 'Supergodcard' then
        local sum = 0
        for i = 1, #G.consumeables.cards do
            sum = sum + G.consumeables.cards[i].sell_cost 
        end
        self.ability.extra.suml = sum
    end

    if self.ability.name == 'Smartcowboy' then
        local smartcowboy_mult = math.floor((G.GAME.dollars + (G.GAME.dollar_buffer or 0))/self.ability.extra.perdollar)
        self.ability.extra.x_mult = 1 + self.ability.extra.perxmult * math.abs(smartcowboy_mult)
    end
'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.ability.name == 'Blueprint' or self.ability.name == 'Brainstorm' then'''
position = "before"
payload = '''
    if self.ability.name == 'Microchip' then
        local left_joker = nil
        local right_joker = nil
        for i = 1, #G.jokers.cards do
            if G.jokers.cards[i] == self then
                local index = i - 1
                local index1 = i + 1
                local index2 = index1
                local index3 = 1
                local index4 = index3
                while index > 0 and G.jokers.cards[index].ability and G.jokers.cards[index].ability.name == 'Microchip' and not G.jokers.cards[index].debuff do
                    index = index - 1
                end
                if index > 0 and G.jokers.cards[index].ability and G.jokers.cards[index].ability.name == 'Blueprint' and not G.jokers.cards[index].debuff then
                    while index1 <= #G.jokers.cards and G.jokers.cards[index1].ability and (G.jokers.cards[index1].ability.name == 'Microchip' or G.jokers.cards[index1].ability.name == 'Blueprint') and not G.jokers.cards[index1].debuff do
                        index1 = index1 + 1
                    end
                    if index1 <= #G.jokers.cards and G.jokers.cards[index1].ability and G.jokers.cards[index1].ability.name == 'Brainstorm' and not G.jokers.cards[index1].debuff then
                        while G.jokers.cards[index3].ability and (G.jokers.cards[index3].ability.name == 'Microchip' or G.jokers.cards[index3].ability.name == 'Blueprint') and not G.jokers.cards[index3].debuff do
                            index3 = index3 + 1
                        end
                        if G.jokers.cards[index3].ability and G.jokers.cards[index3].ability.name ~= 'Brainstorm' then
                            left_joker = G.jokers.cards[index3]
                        end
                    elseif index1 <= #G.jokers.cards and G.jokers.cards[index1].ability and G.jokers.cards[index1].ability.name ~= 'Brainstorm' then
                        left_joker = G.jokers.cards[index1]
                    end
                elseif index > 0 and G.jokers.cards[index].ability and G.jokers.cards[index].ability.name == 'Brainstorm' and not G.jokers.cards[index].debuff then
                    while G.jokers.cards[index3].ability and (G.jokers.cards[index3].ability.name == 'Microchip' or G.jokers.cards[index3].ability.name == 'Blueprint') and not G.jokers.cards[index3].debuff do
                        index3 = index3 + 1
                    end
                    if G.jokers.cards[index3].ability and G.jokers.cards[index3].ability.name ~= 'Brainstorm' then
                        left_joker = G.jokers.cards[index3]
                    end
                elseif index > 0 then
                    left_joker = G.jokers.cards[index]
                end
                while index2 <= #G.jokers.cards and G.jokers.cards[index2].ability and (G.jokers.cards[index2].ability.name == 'Microchip' or G.jokers.cards[index2].ability.name == 'Blueprint') and not G.jokers.cards[index2].debuff do
                    index2 = index2 + 1
                end
                if index2 <= #G.jokers.cards and G.jokers.cards[index2].ability and G.jokers.cards[index2].ability.name == 'Brainstorm' and not G.jokers.cards[index2].debuff then
                    while G.jokers.cards[index4].ability and (G.jokers.cards[index4].ability.name == 'Microchip' or G.jokers.cards[index4].ability.name == 'Blueprint') and not G.jokers.cards[index4].debuff do
                        index4 = index4 + 1
                    end
                    if G.jokers.cards[index4].ability and G.jokers.cards[index4].ability.name ~= 'Brainstorm' then
                        right_joker = G.jokers.cards[index4]
                    end
                elseif index2 <= #G.jokers.cards then
                    right_joker = G.jokers.cards[index2]
                end
            end
        end
        if left_joker and left_joker ~= self and left_joker.config.center.blueprint_compat then
            self.ability.leftblueprint_compat = 'compatible'
        else
            self.ability.leftblueprint_compat = 'incompatible'
        end
        if right_joker and right_joker ~= self and right_joker.config.center.blueprint_compat then
            self.ability.rightblueprint_compat = 'compatible'
        else
            self.ability.rightblueprint_compat = 'incompatible'
        end
    end
'''
match_indent = false
overwrite = false